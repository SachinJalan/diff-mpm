#+title: Jax Port for MPM
#+property: header-args :session mpm :async yes :exports both :eval no-export

This document covers the process of porting the [[https://github.com/cb-geo/mpm/][CB-GEO MPM]] functionalities to a JAX based version. The initial idea is to implement basic classes for different elements of the MPM such that the classes can be then inherited/extended to provide support for 1D/2D/3D MPM. The first steps are just to implement the 1D case with extensibility in mind.

* Classes
** Nodes
Nodes are one of the two most basic structures used in MPM. Nodes have their mass, velocity, momentum, internal forces, external forces and damping forces that are then used for particle updates. Instead of having every node as a class instance and maintaining a container of Node objects (/array of structs/), we will try to make the ~Node~ class a generic container class that takes in the number of nodes required and maintain its own arrays (/struct of arrays/).

#+begin_src jupyter-python :tangle diffmpm/node.py
import jax.numpy as jnp


class Nodes:
    """
    Nodes container class.

    Keeps track of all values required for nodal points.

    Attributes
    ----------
    nnodes : int
        Number of nodes stored.
    position : array_like
        Position of all the nodes.
    velocity : array_like
        Velocity of all the nodes.
    mass : array_like
        Mass of all the nodes.
    momentum : array_like
        Momentum of all the nodes.
    f_int : array_like
        Internal forces on all the nodes.
    f_ext : array_like
        External forces present on all the nodes.
    f_damp : array_like
        Damping forces on the nodes.
    """
    def __init__(self, n):
        """
        Parameters
        ----------
        n : int
            Number of nodes in the mesh.
        """
        self.nnodes = n
        self.position = jnp.zeros(n)
        self.velocity = jnp.zeros(n)
        self.mass = jnp.zeros(n)
        self.momentum = jnp.zeros(n)
        self.f_int = jnp.zeros(n)
        self.f_ext = jnp.zeros(n)
        self.f_damp = jnp.zeros(n)
        return

    def _reset_values(self):
        self.position.fill(0)
        self.velocity.fill(0)
        self.mass.fill(0)
        self.momentum.fill(0)
        self.f_int.fill(0)
        self.f_ext.fill(0)
        self.f_damp.fill(0)
#+end_src

The current implementation of nodes sets 1D arrays for all the variables. When extending to 2D, a decision will have to be made on if we want to store the nodes in a 2D array or in a 1D array with implicit indexing.
